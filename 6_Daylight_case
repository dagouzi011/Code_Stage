using OptimalControl
using NLPModelsIpopt
using Plots
using MadNLP

# Parameters
kP = 1.6/24
K = 140.0
I_max = 300.0       # max light
α = 0.1             
L = 50.0            # max depth
kR_bar = 1.5/24
z_bar = 35.0
n = 3
tf = 120.0           # time window

T_day = 24.0        # 24 hours
ω = 2 * π / T_day
t0 = 6.0            # sunrise time

# Correct periodic light function
function I_light_surface(t)
    return I_max * max(0, sin(ω * (t - t0)))
end

# Light with depth attenuation
function I_light(z, t)
    return I_light_surface(t) * exp(-α * z)
end

# Biological functions
function vP(p, z, t)
    return kP * p * I_light(z, t) / (K + p * I_light(z, t))
end

function kR(z)
    return kR_bar * z^n / (z_bar^n + z^n)
end

# OCP definition
ocp = @def begin
    t ∈ [0, tf], time
    x = (c, p, z) ∈ R^3, state
    U ∈ R^2, control

    c(0) == 0.2
    p(0) == 0.2
    z(0) == 20.0

    0 ≤ U(t)[1] ≤ 1
    -1 ≤ U(t)[2] ≤ 1

    0 ≤ c(t) ≤ 1
    0 ≤ p(t) ≤ 1
    0 ≤ z(t) ≤ L
    c(t) + p(t) ≤ 1

    ẋ(t) == [
        vP(p(t), z(t), t) * (1 - c(t)) - kR(z(t)) * c(t) * (1 - c(t) - p(t)),
        U(t)[1] * kR(z(t)) * c(t) * (1 - c(t) - p(t)) - vP(p(t), z(t), t) * p(t),
        U(t)[2]
    ]

    ∫(vP(p(t), z(t), t)) → max
end

# Multi-step solve strategy
sol1 = solve(ocp, :direct, :adnlp, :madnlp, grid_size=50, display=false)
sol2 = solve(ocp, :direct, :adnlp, :madnlp, init=sol1, grid_size=100, display=false)
sol3 = solve(ocp, :direct, :adnlp, :madnlp, init=sol2, grid_size=200, display=false)
sol4 = solve(ocp, :direct, :adnlp, :ipopt, init=sol3, grid_size=300, display=false)
sol5 = solve(ocp, :direct, :adnlp, :ipopt, init=sol4, grid_size=400, display=false)
sol6 = solve(ocp, :direct, :adnlp, :ipopt, init=sol5, grid_size=500, display=false)
sol7 = solve(ocp, :direct, :adnlp, :ipopt, init=sol6, grid_size=600, display=false)
sol8 = solve(ocp, :direct, :adnlp, :ipopt, init=sol7, grid_size=700, display=false)
sol = solve(ocp, :direct, :adnlp, :ipopt, init=sol8, grid_size=800, display=true)

# Plot optimal control solution
plt = plot(sol)
display(plt)

