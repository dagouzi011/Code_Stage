import numpy as np
import matplotlib.pyplot as plt
from pyomo.environ import ConcreteModel, Var, Objective, Constraint, maximize, value
from pyomo.opt import SolverFactory

# Parameter settings
kP = 1.6
K = 140.0
kR = 2.1
k_gamma = 1e-5
alpha = 2
I_values = [10, 30, 50, 100, 200, 400, 600, 800, 1000]
eps = 1e-6

# Store models and results
models = []
results = []

# Definition of v_P function
def v_P(p, I):
    return kP * p * I / (K + p * I)

# Create solver
solver = SolverFactory('ipopt')
solver.options['tol'] = 1e-6
solver.options['max_iter'] = 3000
solver.options['bound_push'] = 1e-6
solver.options['mu_init'] = 1e-3
solver.options['bound_relax_factor'] = 1e-6
solver.options['print_level'] = 0

print(f"Parameters used: kP={kP}, K={K}, kR={kR}, k_gamma={k_gamma}, alpha={alpha}")
print("="*80)

# Initial guess
prev_solution = {'c': 0.5, 'p': 0.3, 'u': 0.5}

# Store results
c_values = []
p_values = []
u_values = []
J_values = []
gamma_values = []

# Solve in loop
for I in I_values:
    gamma = k_gamma * (I ** alpha)

    model = ConcreteModel()

    model.c = Var(bounds=(eps, 1 - eps), initialize=prev_solution['c'])
    model.p = Var(bounds=(eps, 1 - eps), initialize=prev_solution['p'])
    model.u = Var(bounds=(0, 1), initialize=prev_solution['u'])

    model.obj = Objective(expr=v_P(model.p, I) - gamma * model.p, sense=maximize)

    model.eq1 = Constraint(expr=v_P(model.p, I) * (1 - model.c) -
                                kR * model.c * (1 - model.c - model.p) +
                                gamma * model.c * model.p == 0)

    model.eq2 = Constraint(expr=model.u * kR * model.c * (1 - model.c - model.p) -
                                v_P(model.p, I) * model.p -
                                gamma * model.p * (1 - model.p) == 0)

    model.ineq = Constraint(expr=model.c + model.p <= 1 - eps)
    model.c_min = Constraint(expr=model.c >= 1e-4)
    model.p_min = Constraint(expr=model.p >= 1e-4)

    result = solver.solve(model, tee=False)

    models.append(model)
    results.append(result)

    # Store solution
    c_val = value(model.c)
    p_val = value(model.p)
    u_val = value(model.u)
    J_val = value(model.obj)

    c_values.append(c_val)
    p_values.append(p_val)
    u_values.append(u_val)
    J_values.append(J_val)
    gamma_values.append(gamma)

    # Update warm start
    prev_solution['c'] = c_val
    prev_solution['p'] = p_val
    prev_solution['u'] = u_val

    # Print results
    print(f"I = {I}\tgamma = {gamma:.6f}")
    print(f"  c = {c_val:.6f}\tp = {p_val:.6f}\tu = {u_val:.6f}")
    print(f"  J = {J_val:.6f}")
    if result.solver.termination_condition == 'optimal':
        print("  -> Solved successfully!")
    else:
        print(f"  -> Warning: Solution may not be optimal. Status: {result.solver.status}, Termination: {result.solver.termination_condition}")
    print("-" * 60)

# Plot: P* vs light intensity I
plt.figure(figsize=(8, 6))
plt.plot(I_values, p_values, 'ro-', linewidth=2, markersize=8)
plt.xlabel('light intensity I', fontsize=12)
plt.ylabel('p*', fontsize=12)
plt.title('p* vs light intensity I', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('p_vs_I_Pstar.png')
plt.show()

# Final result table
print("\nResults:")
print("I\tgamma\t\tc\t\tp\t\tu\t\tJ")
for I, gamma, c, p, u, J in zip(I_values, gamma_values, c_values, p_values, u_values, J_values):
    print(f"{I}\t{gamma:.6f}\t{c:.6f}\t{p:.6f}\t{u:.6f}\t{J:.6f}")
